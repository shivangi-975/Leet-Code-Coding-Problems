#include<iostream>
using namespace std;
#include<bits/stdc++.h>
vector<int>encryptionValidity(int instructionCount, int validityPeriod, vector<int>keys)
  {
    vector<int>v;
    int max_degree_div = 0;
    for(auto k:keys){
         int degree_div = 0;
        for(int i=0;i<keys.size();i++)
          {
               if (k % keys[i] == 0)
               {
                    degree_div += 1;
               }
          }
      
        if (max_degree_div < degree_div)
          
          {
               max_degree_div = degree_div;
          }
}
    int strength_enc = (max_degree_div)*(100000);
    int test_keys = instructionCount * validityPeriod;
    if (strength_enc <= test_keys)
    {    v.push_back(1);
         v.push_back(strength_enc);
         return v;
    }
  
    else
    {    v.push_back(0);
         v.push_back(strength_enc);
         return v;
        
    }
}
int main()
{   vector<int> b={0};
    //vector<int>a={2,4,8,2};
    b=encryptionValidity(1000, 10000,{2,4,8,2} );
    for(int i=0;i<b.size();i++)
    {
        cout<<b[i]<<" ";
    }
}
