#include <bits/stdc++.h>
#include <vector>
#include <queue>
#include <map>
#include <unordered_set>
#include <string>
#include <cmath>
using namespace std;
#define ll long long 
#define mod 1000000007
#define MAX 1000000

int compare(pair<int,vector<int>> a, pair<int,vector<int>> b)
{
    return (a.second).size()<(b.second).size();
}

bool solve(vector<int> &a,vector<int> &b,int s)
{
    int n = a.size();
    if(n>s)
    {
        return false;
    }
    vector<pair<int,int>> pref(n,pair<int,int>());
    unordered_map<int,vector<int>> mp;
    for(int i=0;i<n;i++)
    {
        pref[i] = {a[i],b[i]};
        mp[a[i]].push_back(i);
        mp[b[i]].push_back(i);
    }
    vector<pair<int,vector<int>>> slots;               
    for(auto it=mp.begin();it!=mp.end();it++)              
    {                                                         
        slots.push_back({it->first,it->second});           
    }
    sort(slots.begin(),slots.end(),compare);
    vector<int> visited(n,0);
    vector<int> slot_visited(s+1,0);
    for(int i=0;i<slots.size();i++)
    {
        pair<int,vector<int>> curr = slots[i];
        int sl = curr.first;
        vector<int> c = curr.second;
        if(slot_visited[sl])
        {
            continue;
        }
        int idx = c[0];
        int maxx = INT_MIN;
        for(int j=0;j<c.size();j++)
        {
            pair<int,int> p = pref[c[j]];
            if(visited[c[j]])
            {
                continue;
            }
            if(sl!=p.first)
            {
                if(maxx<mp[p.first].size())
                {
                    idx = c[j];
                    maxx = mp[p.first].size();
                }
            }
            else{
                if(maxx<mp[p.second].size())
                {
                    idx = c[j];
                    maxx = mp[p.second].size();
                }
            }
        }
        slot_visited[sl] = 1;
        visited[idx] = 1;
        for(int j=0;j<c.size();j++)
        {
            if(visited[c[j]])
            {
                continue;
            }
            if(c[j]!=idx)
            {
            pair<int,int> p = pref[c[j]];
            if(sl!=p.first)
            {
                if(!slot_visited[p.first])
                {
                    slot_visited[p.first] = 1;
                    visited[c[j]] = 1;
                }
            }
            else{
                if(!slot_visited[p.second])
                {
                    slot_visited[p.second] = 1;
                    visited[c[j]] = 1;
                }
            }
            }
        }

    }
    for(int i=0;i<n;i++)
    {
        if(!visited[i])
        {
            return false;
        }
    }
    return true;
}

int main(){
    
    int t=1;
    //cin>>t;
    while(t--){
        int n;
        cin>>n;
        vector<int> a(n);
        vector<int> b(n);
        for(int i=0;i<n;i++)
        {
            cin>>a[i];
        }
        for(int i=0;i<n;i++)
        {
            cin>>b[i];
        }
        int s;
        cin>>s;
        cout<<solve(a,b,s)<<endl;
    }
    return 0;
}
