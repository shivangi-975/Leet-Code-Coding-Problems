class Solution {
public:
    int memo[51][51][51];
    int helper(vector<vector<int>>& grid,int n,int r1,int c1,int c2)
    {   
        int r2=r1+c1-c2;
        if(r1>=n||c1>=n||c2>=n||r2>=n||grid[r1][c1]==-1||grid[r2][c2]==-1)
        {
            return INT_MIN;
        }
        if(r1==n-1&&c1==n-1)
        {
            return grid[n-1][n-1];
        }
        if(memo[r1][c1][c2]!=-1)
        {
            return memo[r1][c1][c2];
        }
        int ans=0;
        ans+=grid[r1][c1];
        if(c1!=c2)
        {
            ans+=grid[r2][c2];
        }
        int f1=helper(grid, n,r1, c1+1,c2+1);
        int f2=helper(grid, n,r1+1, c1,c2);
        int f3=helper(grid, n,r1+1, c1,c2+1);
        int f4=helper(grid, n,r1, c1+1,c2);
        int temp=max(max(f1,f2),max(f3,f4));
        ans+=temp;
    return memo[r1][c1][c2] = ans;
        
    }
    
    
    int cherryPickup(vector<vector<int>>& grid) {
        int n=grid.size();
        memset(memo,-1,sizeof(memo));
        return max(0,helper(grid,n,0,0,0));    
    }
};
