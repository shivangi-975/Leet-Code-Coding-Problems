/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
using namespace std;
class Base
{
    public:
    Base(){cout<<"Constructing Base\n";}
    ~Base(){cout<<"Destroying Base\n";}
};
class Derive:public Base
{
    public:
    Derive(){cout<<"Constructing Derive\n";}
    ~Derive(){cout<<"Destryoing Derive\n";}
    
};
int main()
{
    Base*basePtr=new Derive();
    delete basePtr;
    return 0;
}
==================================
Result:
Constructing Base
Constructing Derive
Destroying Base
==================================
#include <iostream>
using namespace std;
 
int main()
{
    int arr[5]={11,22,33,44,55};
    for(int i=0;i<5;i++)
    {
        cout<<*(arr+i)<<" ";
    }
    return 0;
}
 
=============================
11 22 33 44 55
============================



Which one of the following is the correct way to declare a pure virtual function?

Virtual test()=0;
===========================



#include <iostream>
using namespace std;
int main()
{
    std::string s("mathworks");
    for(;s!='\0';s++)
    {
        printf("%c",s);
    }
    return 0;
    
}
==================
Compiler error
==================

#include <iostream>
#include<string>
using namespace std;

int main()
{
    string s1="Hello";
    string s2="world";
    string s3=(s1+s2);
    cout<<s3<<" ";
}
=========================
Only  '+' will work
=========================


#include <iostream>

using namespace std;

class Base
{
    public:
    virtual void show()=0;
    virtual void print()=0;
    
};
class Derived:public Base
{
    public:
    void show()
    {
        cout<<"show function in derived class called";
    }
};
 int main()
 {
     Base obj;
     Base=b;
     Derived d;
     b=&d;
     b->show();
 }
 
Error:
prog.cpp: In function ‘int main()’:
prog.cpp:30:11: error: cannot declare variable ‘obj’ to be of abstract type ‘Base’
      Base obj;
           ^~~
prog.cpp:13:7: note:   because the following virtual functions are pure within ‘Base’:
 class Base
       ^~~~
prog.cpp:16:18: note: 	virtual void Base::show()
     virtual void show()=0;
                  ^~~~
prog.cpp:17:18: note: 	virtual void Base::print()
     virtual void print()=0;
                  ^~~~~
prog.cpp:31:10: error: expected unqualified-id before ‘=’ token
      Base=b;
          ^
prog.cpp:32:14: error: cannot declare variable ‘d’ to be of abstract type ‘Derived’
      Derived d;
              ^
prog.cpp:20:7: note:   because the following virtual functions are pure within ‘Derived’:
 class Derived:public Base
       ^~~~~~~
prog.cpp:17:18: note: 	virtual void Base::print()
     virtual void print()=0;
                  ^~~~~
prog.cpp:33:6: error: ‘b’ was not declared in this scope
      b=&d;
      ^
=================================================================
#include <iostream>

using namespace std;

class Base
{
    public:
    int a;
    protected:
    int b;
    private:
    int c;
};
class Derived:public Base
{
    void doSomething()
    {
        a=10;
        b=20;
        c=30;
    }
};
main.cpp:28:9: error: ‘int Base::c’ is private within this context
         c=30;
         ^
main.cpp:20:9: note: declared private here
     int c;
         ^
====================================================================
#include <iostream>

using namespace std;

class A{
	public:
	A(){
    	cout<<"A"<<endl;
	}
};
class B:public A{
	public:
	B(){
    	cout<<"B"<<endl;
	}
};
int main(){
	B b;
}
===============================
Output:
A
B
===============================
// Online C compiler to run C program online
#include <stdio.h>
void main()
{
	int i=2,j=0,k=-2,l=5,m=0;
	m=i++&&++j&&++k||l++;
	printf("%d %d %d %d %d\n",i,j,k,l,m);
}
===============================
  Output:3,1,-1,5,1
===============================


#include <iostream>
using namespace std;
 
int main()
{
    int arr[5]={11,22,33,44,55};
    for(int i=0;i<5;i++)
    {
        cout<<*(arr+i)<<" ";
    }
    return 0;
}
 
 
ans :11 22 33 44 55
==============================
#include <iostream>
using namespace std;
#include<string>
#include <bits/stdc++.h> 
class A{
    public:
    int a;
    int* b;
    A(int x,int* y):a(x),b(y){}
    A(const A& Ain){
        this.a=Ain.a;
    }
};
int main()
{
    A p(10,NULL);
    A q(p);
    if(q.b)
        std::cout<<"true";
    else
        std::cout<<"false";
}
Compilation error
=================================
template for node class that can be. used in a linked list.
template<class T>class node{public:node*next,T value;}
================================
interface Writable
{
    public String write(String data);
}
abstract class Pen implements Writable{
    public void printString(String str){
        System.out.println(str);
    }
}
class FountainPen implements Writable{
    public String write(String s){
        System.out.println("Fountain Pen"+s);
        return "MathWorks";
    }
}
public class Shivangi{
public static void main(String[]args){
    new FountainPen().write("Blue");
}
}
Ans:Fountain PenBlue
==============================
Java objects are passed by reference
==============================






